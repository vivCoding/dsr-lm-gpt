// represents a question asking about relation between two names
// asks how is person2 related to person1, in person1's POV?
type question(person1: String, person2: String)

// context, aka the possible relationships in the current problem, and its associated probabilities
// for each name pair, it will include a list of probabilities of ALL relationships
// Example: Alice is Bob's daughter
// context(daughter, bob, alice)
type context(rela: usize, person1: String, person2: String)

// describes how transitive relations are defined
// if (a, b) has r1, and (b, c) has r2, then (a, c) has r3
type transitive(r1: usize, r2: usize, r3: usize)

// hardcoded transitive rules (domain knowledge)
rel transitive = {
  (0, 0, 6), // daughter-daughter-granddaughter
  (0, 1, 0), // daughter-sister-daughter
  (0, 2, 15), // daughter-son-grandson
  (0, 3, 1), // daughter-aunt-sister
  (0, 4, 5), // daughter-father-husband
  (0, 5, 16), // daughter-husband-son-in-law
  (0, 7, 2), // daughter-brother-son
  (0, 9, 12), // daughter-mother-wife
  (0, 10, 7), // daughter-uncle-brother
  (0, 11, 4), // daughter-grandfather-father
  (0, 11, 17), // daughter-grandfather-father-in-law
  (0, 13, 9), // daughter-grandmother-mother
  (0, 13, 19), // daughter-grandmother-mother-in-law
  (1, 0, 14), // sister-daughter-niece
  (1, 1, 1), // sister-sister-sister
  (1, 2, 8), // sister-son-nephew
  (1, 3, 3), // sister-aunt-aunt
  (1, 4, 4), // sister-father-father
  (1, 7, 7), // sister-brother-brother
  (1, 9, 9), // sister-mother-mother
  (1, 10, 10), // sister-uncle-uncle
  (1, 11, 11), // sister-grandfather-grandfather
  (1, 13, 13), // sister-grandmother-grandmother
  (2, 0, 6), // son-daughter-granddaughter
  (2, 1, 0), // son-sister-daughter
  (2, 2, 15), // son-son-grandson
  (2, 3, 1), // son-aunt-sister (likely)
  (2, 4, 5), // son-father-husband
  (2, 7, 2), // son-brother-son
  (2, 9, 12), // son-mother-wife
  (2, 10, 7), // son-uncle-brother (likely)
  (2, 11, 4), // son-grandfather-father (likely)
  (2, 12, 18), // son-wife-daughter-in-law
  (2, 13, 9), // son-grandmother-mother (likely)
  (3, 1, 3), // aunt-sister-aunt
  (3, 4, 11), // aunt-father-grandfather
  (3, 7, 10), // aunt-brother-uncle
  (3, 9, 13), // aunt-mother-grandmother
  (4, 0, 1), // father-daughter-sister
  (4, 1, 3), // father-sister-aunt
  (4, 2, 7), // father-son-brother
  (4, 4, 11), // father-father-grandfather
  (4, 7, 10), // father-brother-uncle
  (4, 9, 13), // father-mother-grandmother
  (4, 12, 9), // father-wife-mother
  (5, 0, 0), // husband-daughter-daughter
  (5, 2, 2), // husband-son-son
  (5, 4, 17), // husband-father-father-in-law
  (5, 6, 6), // husband-granddaughter-granddaughter
  (5, 9, 19), // husband-mother-mother-in-law
  (5, 15, 15), // husband-grandson-grandson
  (6, 1, 6), // granddaughter-sister-granddaughter
  (6, 7, 15), // granddaughter-brother-grandson
  (7, 0, 14), // brother-daughter-niece
  (7, 1, 1), // brother-sister-sister
  (7, 2, 8), // brother-son-nephew
  (7, 3, 3), // brother-aunt-aunt
  (7, 4, 4), // brother-father-father
  (7, 7, 7), // brother-brother-brother
  (7, 9, 9), // brother-mother-mother
  (7, 10, 10), // brother-uncle-uncle
  (7, 11, 11), // brother-grandfather-grandfather
  (7, 13, 13), // brother-grandmother-grandmother
  (8, 1, 14), // nephew-sister-niece
  (8, 7, 8), // nephew-brother-nephew
  (9, 0, 1), // mother-daughter-sister
  (9, 1, 3), // mother-sister-aunt
  (9, 2, 7), // mother-son-brother
  (9, 4, 11), // mother-father-grandfather
  (9, 5, 4), // mother-husband-father
  (9, 7, 10), // mother-brother-uncle
  (9, 9, 13), // mother-mother-grandmother
  (9, 17, 11), // mother-father-in-law-grandfather
  (9, 19, 13), // mother-mother-in-law-grandmother
  (10, 1, 3), // uncle-sister-aunt
  (10, 4, 11), // uncle-father-grandfather
  (10, 7, 10), // uncle-brother-uncle
  (10, 9, 13), // uncle-mother-grandmother
  (11, 12, 13), // grandfather-wife-grandmother
  (12, 0, 0), // wife-daughter-daughter
  (12, 2, 2), // wife-son-son
  (12, 4, 17), // wife-father-father-in-law
  (12, 6, 6), // wife-granddaughter-granddaughter
  (12, 9, 19), // wife-mother-mother-in-law
  (12, 15, 15), // wife-grandson-grandson
  (12, 16, 16), // wife-son-in-law-son-in-law
  (12, 17, 4), // wife-father-in-law-father
  (12, 18, 18), // wife-daughter-in-law-daughter-in-law
  (12, 19, 9), // wife-mother-in-law-mother
  (13, 5, 11), // grandmother-husband-grandfather
  (15, 1, 6), // grandson-sister-granddaughter
  (15, 7, 15), // grandson-brother-grandson
}

// Things can be derived through context propagation
// derived relationships that can taken solely from context
rel derived(rela, person1, person2) = context(rela, person1, person2)

// relationships we can derive from context and transitive rules
// if relationship is transitive, and we derive a relationship from x and y, and relationship from y, z
// we can form a relationship between x and z with relationship r3
rel derived(r3, x, z) =
    transitive(r1, r2, r3),
    derived(r1, x, y),
    derived(r2, y, z),
    x != z

// Answer
// finally, we create relationship "answer" with person1 and person2 given we have derived it
rel answer(rela) =
    question(person1, person2),
    derived(rela, person1, person2)
